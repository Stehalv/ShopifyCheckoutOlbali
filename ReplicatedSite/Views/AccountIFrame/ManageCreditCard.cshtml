@model CreditCard
@{
    switch (Model.Type)
    {
        case CreditCardType.New:
            ViewBag.Title = Resources.Common.Global_AddNewCard;
            break;
        case CreditCardType.Primary:
            ViewBag.Title = Resources.Common.Global_EditPrimaryCard;
            break;
        case CreditCardType.Secondary:
            ViewBag.Title = Resources.Common.Global_EditSecondaryCard;
            break;
    }
}

<div id="view-ccoverview">

    <div class="content-wrap">
        <div class="container">
            @using (Html.BeginForm("savecreditcard", "account"))
            {

                @Html.HiddenFor(c => c.Type)

                if (Model.IsUsedInAutoOrders)
                {
                    <div class="alert alert-info" role="alert">
                        <h4>@Resources.Common.EditingAutoOrderCreditCards</h4>
                        @Resources.Common.ChangesToAutoOrderCreditCards.FormatWith(Model.AutoOrderIDs.Length)
                    </div>
                }

                <div class="card card-body mb-3 border-right-0 border-left-0">
                    @Html.EditorForModel()
                </div>

                <a id="btnSaveCard" class="btn btn-primary" data-loading-text="@Resources.Common.Loading">@Resources.Common.SaveChanges</a>
                <a href="@Url.Action("PaymentMethodList")" class="btn btn-link">@Resources.Common.Cancel</a>

                if (Model.Type != CreditCardType.New && !Model.IsUsedInAutoOrders)
                {
                    <span class="float-right">
                        <a href="@Url.Action("DeleteCreditCard", new { type = Model.Type })" class="btn btn-secondary">@Resources.Common.Delete</a>
                    </span>
                }

                @Html.AntiForgeryToken()
            }

        </div>
    </div>
</div>

@section scripts
{
    <style>
        #cc-wrapper {
            max-height: 40px;
        }
    </style>
    <script src="@Url.Action("TokenEx", "App")"></script>
    <script>
        require(["jquery", "forms", "toastr", "bootstrap"], function ($, forms, toastr) {

            // Settings
            var context = "#view-ccoverview",
                $context = $(context);

            var windowWidth = $(window).width();
            var ccFieldWidth = "90%";
            if (windowWidth < 330) {
                ccFieldWidth = "90%";
            } else if (windowWidth < 576) {
                ccFieldWidth = "92%";
            } else if (windowWidth < 767) {
                ccFieldWidth = "80%";
            } else if (windowWidth < 1095) {
                ccFieldWidth = "80%";
            }

            var tokenizer = new TokenExIframeClient("cc-wrapper", {
                styles: {
                    base: "display: block;width: " + ccFieldWidth + ";padding: .375rem .75rem;font-size: 1rem;line-height: 1.5;color: #495057;background-color: #fff;background-clip: padding-box;border: 1px solid #ced4da;border-radius: .25rem;transition: border-color .15s ease-in -out, box-shadow .15s ease-in -out;margin: 0;font-family: inherit;",
                    focus: "color: #495057;border: 1px solid #f6cac3;outline:none;",
                    error: "@Resources.Common.CardIsInvalid"
                },
            });


            // Event Handlers
            function registerEventHandlers() {
                $('#btnSaveCard').on('click', async function () {
                    var $this = $(this);
                    var $form = $this.parents("form").first();

                    if ($form.valid()) {
                        $this.button("loading");

                        var cardNumber = $("#@Html.IdFor(c => c.CardNumber)").val();

                        var tokenize = async function () {
                             tokenizer.tokenize({
                                success: function (data) {
                                    console.log('tokenized success', data);

                                    var token = data.token;
                                    $(".creditcard-token").val(token);

                                    //var cardDisplay = token.substr(token.length - 4);
                                    //$(".creditcard-display").val(cardDisplay);

                                    $form.submit();
                                },
                                error: function (data) {
                                    console.log("get cc token failed", data);
                                    toastr.error(data);
                                    $this.button("reset");
                                    return;
                                }
                            });
                        };

                        var tokenizeResult = await tokenize();

                        if (tokenizeResult == false)
                            toastr.message("Error on tokenize cc");

                        if (!$form.valid()) {
                            $this.button("reset");
                        }
                    }
                });
            }


            // Initialization
            function init() {
                registerEventHandlers();
            }
            init();

        });
    </script>
}